# racc -v -g cl.racc

class ClParser

options no_result_var

prechigh
  left '||'
  nonassoc '='
preclow

rule

  program   : stmt_list
                {
                  RootNode.new(val[0])
                }

  stmt_list :
                {
                  []
                }
            | stmt_list stmt EOL
                {
                  val[0].push val[1]
                }
            | stmt_list EOL

  stmt      : if_stmt
            | command

  if_stmt   : IF COND '(' expr ')' THEN '(' command ')'
                {
                  IfNode.new(@file_name, val[0][0], val[7])
                }

  command   : IDENT parms
                {
                  CommandNode.new(@file_name, val[0][0], val[0][1], val[1])
                }
            | IDENT args
                {
                  CommandNode.new(@file_name, val[0][0], val[0][1], val[1])
                }
            | IDENT
                {
                  CommandNode.new(@file_name, val[0][0], val[0][1], nil)
                }

  parms     : parm
            | parms parm

  parm      : IDENT '(' args ')'
                {
                  val[2]
                }
            | CMD '(' command ')'                             # 例.CMD(CALL PGM(PGM1A))
                {
                  val[2]
                }
            | IDENT '(' primary '(' NUMBER NUMBER ')' ')'     # 例.DTAARA(WRKLIB/AREA1 (1 7))

  args      : primary
            | args primary
 
  expr      : primary '=' primary
            | primary '||' primary

  function  : SST '(' args ')'

  primary   : IDENT
            | NUMBER
            | STRING
            | RESERVED
            | IDENT '/' IDENT
                {
                  val[2]
                }            
            | function
            | expr  

end

---- header ----
#
# generated by racc
#
require './cl.rex.rb'

---- inner ----

  def parse(file, file_name)
    @file_name = file_name
    @q = ClLexer.new
    @q.load_file(file_name)
    @yydebug = true
    do_parse
  end

  def next_token
    @q.next_token
  end

  def on_error(t, v, values)
    if v
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@file_name}:#{line}: syntax error on #{v.inspect}"
  end